name: Deploy a vCluster

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'vCluster Name'
        required: true
      repoURLforArgo: 
        description: 'The URL of the repository for Argo CD to deploy the vCluster'
        required: true
      hostClusterType:
        description: 'The type of the host K8s cluster, either eks, gke, or aks'
        required: true      
      hostCIVO_URLforArgo: 
        description: 'The URL of the host CIVO cluster in Argo CD for vcluster and API deployment'
        required: false
      hostCIVOprojectName:
        description: 'The name of the host CIVO project'
        required: false
      hostCIVOClusterName:
        description: 'The name of the host CIVO cluster'
        required: false
jobs:
  deploy-vcluster:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ secrets.MANAGEMENT_CLUSTER_KUBECONFIG }}  # Set once globally

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Login to Akeyless
      run: |
        RESPONSE=$(curl --request POST \
        --url https://api.akeyless.io/auth \
        --header 'accept: application/json' \
        --header 'content-type: application/json' \
        --data '
          {
            "access-type": "access_key",
            "json": true,
            "access-id": "${{ secrets.AKEYLESS_ACCESS_ID }}",
            "access-key": "${{ secrets.AKEYLESS_API_ACCESS_KEY }}"
          }
        ')
        TOKEN=$(echo $RESPONSE | jq -r '.token')
        if [ -z "$TOKEN" ]; then
          echo "Failed to retrieve AKEYLESS_TOKEN" >&2
          exit 1
        fi
        echo "AKEYLESS_TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Install Argo CD CLI
      run: |
        sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo chmod +x /usr/local/bin/argocd

    - name: Login to Argo CD
      run: |
        argocd login ${{ secrets.ARGOCD_SERVER }} \
          --username ${{ secrets.ARGOCD_USER }} \
          --password ${{ secrets.ARGOCD_PASS }} \
          --insecure --grpc-web-root-path /argocd

    - name: Register Repository in Argo CD
      run: |
        argocd repo add ${{ github.event.inputs.repoURLforArgo }} \
          --username ${{ github.actor }} --password ${{ secrets.MYGITHUB_TOKEN }}

    - name: Get DNS Ready
      run: backstage/my-backstage-app/packages/backend/templates/vcluster/content/vcluster_scripts/setdns.sh \
        ${{ github.event.inputs.clusterName }}.socrateshlapolosa.org \
        ${{ secrets.CF_ZONE_ID }} ${{ secrets.CF_API_TOKEN }} \
        ${{ secrets.TARGET_DOMAIN }} ${{ github.event.inputs.hostClusterType }}

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Set KUBECONFIG for the selected host cluster
      id: set-kubeconfig
      run: |
        set -e
        SECRET_NAME="${{ github.event.inputs.clusterName }}-cluster"
        kubectl get secret $SECRET_NAME -n ${{ github.event.inputs.clusterName }} \
          -o jsonpath='{.data.kubeconfig}' | base64 --decode > kubeconfig.yaml
        echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV

    - name: Create Argo CD application
      run: |
        set -e
        API_SERVER=$(kubectl config view --kubeconfig=$(pwd)/kubeconfig.yaml -o jsonpath='{.clusters[0].cluster.server}')
        argocd app create ${{ github.event.inputs.clusterName }} \
          --repo ${{ github.event.inputs.repoURLforArgo }} \
          --path vcluster_scripts/vcluster-helm \
          --helm-set vcluster.syncer.extraArgs[0]="--tls-san=${{ github.event.inputs.clusterName }}.socrateshlapolosa.org" \
          --helm-set vcluster.syncer.extraArgs[1]="--out-kube-config-server=${API_SERVER}" \
          --dest-server ${API_SERVER} \
          --project default \
          --sync-policy automated \
          --sync-option CreateNamespace=true \
          --upsert \
          --grpc-web
        sleep 30

    - name: Save Kubeconfig in Akeyless
      run: |
        curl --request POST \
        --url https://api.akeyless.io/update-secret-val \
        --header 'accept: application/json' \
        --header 'content-type: application/json' \
        --data '
          {
            "accessibility": "regular",
            "format": "text",
            "json": true,
            "token": "${{ env.AKEYLESS_TOKEN }}",
            "name": "vclusters/${{ github.event.inputs.clusterName }}/Kubeconfig",
            "value": "'"$(cat kubeconfig.yaml)"'"
          }
        '
